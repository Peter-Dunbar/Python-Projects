import numpy as np
import scipy as si

filename = "input.txt" #PLEASE CHANGE TO FIT YOUR FILE

def createAugMat(R1, R2, R5, R6, E1, E2):
    augMat = np.array([[-1, 1, -1, 0, 0, 0, 0],
                       [1, -1, 0, 1, 0, 0, 0],
                       [0, 0, 1, 0, -1, 1, 0],
                       [0, 0, 0, -1, 1, -1, 0],
                       [R1, R2, 0, 0, 0, 0, E1],
                       [0, 0, 0, 0, R5, R6, E2]])

    print("Augmented Mat:\n")
    print(augMat)
    print("\n")
  
    pl, solution = si.linalg.lu(augMat, permute_l = True)
    print("Solved Matrix:\n")
    print(solution)
    print("\n")
  
    return solution

def readValues(filename):
  with open(filename, 'r') as file:
    transVals = file.read().strip()
    values = transVals.split()

    R1, R2, R3, R4, E1, E2 = map(int, values)
  
  return R1, R2, R3, R4, E1, E2

R1, R2, R3, R4, E1, E2 = readValues(filename)
mat = createAugMat(R1, R2, R3, R4, E1, E2)
print("Solutions in terms of i_6: \n")
print("i_5: i_6 = (%d - (%d * i_5)) / %d\n" % (mat[4][6], mat[4][4], mat[4][5]))
print("i_4: i_6 = ((%d * i_4) - (%d * i_5)) / %d\n" % (mat[3][3], mat[3][4], mat[3][5]))
print("i_3: i_6 = ((%d * i_3) - (%d * i_4)) / %d\n" % (mat[2][2], mat[2][4], mat[2][5]))

print("x = i_3 = ((%d * i_3) - (%d * i_4)) / %d" % (mat[2][2], mat[2][4], mat[2][5]))
print("i_2 = ((%d - (%d * x)) / %d))\n" % (mat[1][6], mat[1][2], mat[1][1]))
  
print("x = i_2 = (%d - ((((%d * i_3) - (%d * i_4)) / %d) * i_5)) / %d   " % (mat[1][6], mat[2][2], mat[2][4], mat[2][5], mat[4][4]))
print("y = i_3 = ((%d * i_3) - (%d * i_4)) / %d\n" % (mat[2][2], mat[2][4], mat[2][5]))
print("i_1 = (-x - y) / %d\n" % mat[0][0])
